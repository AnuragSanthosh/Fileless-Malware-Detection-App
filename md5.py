import sys
from PyQt5 import QtWidgets, uic, QtCore
import requests
import json

class MyWindow(QtWidgets.QMainWindow):
    def __init__(self):
        
        super(MyWindow, self).__init__()

        # Load the UI file
        uic.loadUi('md5.ui', self)

        # Hide the progress bar initially
        self.progressBar.hide()

        # Hide the result label initially
        self.result.hide()

        # Hide the browse button, file line edit, selected file button, and info label initially
        self.browseButton.hide()
        self.fileLineEdit.hide()
        self.selectedFileButton.hide()
        self.infoLabel.hide()

        # Connect the OK button to the show_controls() method
        self.buttonBox.accepted.connect(self.show_controls)

        # Connect the Cancel button to the close() method
        self.buttonBox.rejected.connect(self.close)

        # Initialize file path variable
        self.file_path = ""
        self.showMaximized()

    def show_controls(self):
        # Show the browse button, file line edit, selected file button, and info label
        self.browseButton.show()
        self.fileLineEdit.show()
        self.selectedFileButton.show()
        self.infoLabel.show()

    def start_progress(self):
        # Reset the progress bar
        self.progressBar.setValue(0)

        # Set the maximum value of the progress bar
        self.progressBar.setMaximum(240)  # 4 minutes = 240 seconds

        # Show the progress bar
        self.progressBar.show()

        # Start a timer for 4 minutes (240,000 milliseconds)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_progress)
        self.timer.start(1000)  # Update every 1 second

    def update_progress(self):
        # Get the current value of the progress bar
        current_value = self.progressBar.value()

        # Increase the value by 1 each time
        new_value = current_value + 1

        # Update the progress bar value
        self.progressBar.setValue(new_value)

        # If the progress reaches the maximum value, stop the timer and show the result label
        if new_value >= self.progressBar.maximum():
            self.timer.stop()

            # Show the result label
            self.result.show()

            # Call retrieve_data()
            self.retrieve_data()

    def browse_file(self):
        file_dialog = QtWidgets.QFileDialog.getSaveFileName(self, "Save File", "", "Text files (*.txt)")
        file_path = file_dialog[0]
        if file_path:
            self.file_path = file_path
            self.fileLineEdit.setText(file_path)
            print(f"Selected file path: {file_path}")

    def retrieve_data(self):
        # Make an HTTP request to the PythonAnywhere server
        response = requests.get('http://optimus17410.pythonanywhere.com/upload')
        data = response.json()

        # Save the key-value hashes to the selected file path
        with open(self.file_path, 'w') as f:
            for hash in data['hashes']:
                f.write(f'{hash}\n')

            for key, value in data.items():
                if key != 'hashes':
                    f.write(f'{key}: {value}\n')

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = MyWindow()

    # Connect the "Selected File" button to the start_progress() method
    window.selectedFileButton.clicked.connect(window.start_progress)

    # Connect the "Browse" button to the browse_file() method
    window.browseButton.clicked.connect(window.browse_file)

    window.show()
    sys.exit(app.exec_())
