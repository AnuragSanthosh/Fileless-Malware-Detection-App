from PyQt5 import QtWidgets, uic, QtCore
import sys
import subprocess

class RamCaptureApp(QtWidgets.QMainWindow):
    def __init__(self):
        super(RamCaptureApp, self).__init__()
        uic.loadUi('ramcapture.ui', self)

        self.run_button.clicked.connect(self.run_command)
        self.progress_bar.setVisible(False)  # Hide the progress bar initially
        self.ramdump_label.setVisible(False)  # Hide the ramdump label initially

        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_progress_bar)
        self.showMaximized()

    def run_command(self):
        path1 = self.pathwinpmem.text()
        path2 = self.pathtosave.text()
        command = f"{path1} {path2}"

        self.progress_bar.setValue(0)  # Reset progress bar to 0
        self.progress_bar.setVisible(True)  # Show the progress bar
        self.ramdump_label.setVisible(False)  # Hide the ramdump label

        self.process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        self.timer.start(1000)  # Start the timer to update progress bar every second

    def update_progress_bar(self):
        if self.process.poll() is not None:  # Check if the process has finished
            self.timer.stop()  # Stop the timer
            self.progress_bar.setValue(100)  # Set progress bar to 100%
            self.ramdump_label.setVisible(True)  # Show the ramdump label
        else:
            self.progress_bar.setValue(self.progress_bar.value() + 1)  # Increment progress bar value by 1

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = RamCaptureApp()
    window.show()
    sys.exit(app.exec_())
