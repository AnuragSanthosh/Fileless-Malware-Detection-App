import sys
import os
import subprocess
from PyQt5 import QtWidgets, uic, QtGui, QtCore
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QProgressBar
from PyQt5.QtGui import QPixmap
from flask import Flask, request
import threading
import requests
from pythonui import PythonWindow
from ramcapture import RamCaptureApp


url = 'http://optimus17410.pythonanywhere.com/upload'
data = '["Submitting Dump"]'
headers = {'Content-Type': 'application/json'}

try:
    response = requests.post(url, data=data, headers=headers)
    if response.status_code == 200:
        print('Request sent successfully!')
    else:
        print(f'Request failed with status code: {response.status_code}')
except requests.exceptions.RequestException as e:
    print(f'An error occurred: {str(e)}')

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 1024 * 1024 * 1024  # Set maximum file size to 1 GB (1024 MB)

BUCKET_NAME = 'ramdumpbucket'
BUCKET_URL = f'https://{BUCKET_NAME}.s3.amazonaws.com'


class UploadThread(threading.Thread):
    def __init__(self, file_path):
        threading.Thread.__init__(self)
        self.file_path = file_path

    def run(self):
        print("Submitting dump to AWS:", self.file_path)
        file = open(self.file_path, 'rb')
        try:
            response = requests.put(f'{BUCKET_URL}/{os.path.basename(self.file_path)}', data=file)
            if response.status_code == 200:
                print('File uploaded successfully!')
            else:
                print(f'An error occurred: {response.text}')
        except Exception as e:
            print(f'An error occurred: {str(e)}')


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        uic.loadUi('pythonui.ui', self)
        self.setStyleSheet("background-color: black;")
        self.show()
        self.filelabel.setVisible(False)
        self.chooseFile.clicked.connect(self.select_file)
        self.addimage()
        self.showMaximized()
        self.Analyze.clicked.connect(self.analyze_and_submit)
        self.Analyze.clicked.connect(self.open_popup_window)
        self.capturememory.clicked.connect(self.run_ram_capture)  # Connect the button to the function

    def analyze_and_submit(self):
        self.Analyze.setEnabled(False)  # Disable the analyze button
        file_path = self.textbox.toPlainText()

        if file_path == "":
            self.filelabel.setText("No file selected")  # Display message for no file selected
            self.filelabel.setVisible(True)
            self.Analyze.setEnabled(True)  # Enable the analyze button
            return

        upload_thread = UploadThread(file_path)
        upload_thread.start()

    def open_popup_window(self):
        self.popup_window = PythonWindow()
        self.popup_window.show()

    def addimage(self):
        qpixmap = QPixmap('anu1.png')
        self.imglabel.setPixmap(qpixmap)

    def select_file(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "Select File", "", "Memory Files (*.vmem *.raw *.mem *.dmp)")
        if file_path:
            file_name = os.path.basename(file_path)
            self.textbox.setText(file_path)

    def run_ram_capture(self):
        self.ramcapture_app = RamCaptureApp()
        self.ramcapture_app.show()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    sys.exit(app.exec_())
