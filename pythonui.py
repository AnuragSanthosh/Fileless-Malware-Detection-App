import sys
import threading
import requests
import json
from PyQt5 import uic
from PyQt5.QtCore import Qt, QObject, pyqtSignal, QTimer
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QScrollArea, QWidget, QVBoxLayout
from PyQt5.QtGui import QFont, QColor
from md5 import MyWindow  # Import the MyWindow class from md5.py

class TextUpdater(QObject):
    text_updated = pyqtSignal(str)

    def __init__(self, url):
        super().__init__()
        self.url = url
        self.is_running = False
        self.previous_messages = set()
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_text)

    def start_updating(self):
        self.is_running = True
        self.update_text()  # Update immediately on start
        self.timer.start(500)

    def stop_updating(self):
        self.is_running = False
        self.timer.stop()

    def update_text(self):
        try:
            response = requests.get(self.url)
            if response.status_code == 200:
                data = json.loads(response.text)
                if isinstance(data, list):
                    for item in data:
                        if isinstance(item, str) and item not in self.previous_messages:
                            self.text_updated.emit(item)
                            self.previous_messages.add(item)
                            if "Malware" in item:
                                # Instantiate the MyWindow class and show the window
                                self.window = MyWindow()
                                self.window.show()
                elif isinstance(data, dict):
                    for key, value in data.items():
                        if isinstance(value, str) and value not in self.previous_messages:
                            self.text_updated.emit(value)
                            self.previous_messages.add(value)
                            if "Malware" in value:
                                # Instantiate the MyWindow class and show the window
                                self.window = MyWindow()
                                self.window.show()
        except (requests.exceptions.RequestException, json.JSONDecodeError):
            pass

class PythonWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        
        uic.loadUi('popupwindow.ui', self)
        self.setWindowTitle("Text Updater")
        

        self.scroll_area = self.findChild(QScrollArea, "scrollArea")
        if self.scroll_area is None:
            print("Error: Unable to find QScrollArea with object name 'scrollArea' in UI file")
            return

        self.label = self.findChild(QLabel, "label")
        if self.label is None:
            print("Error: Unable to find QLabel with object name 'label' in UI file")
            return

        # Set a fixed height for the label
        self.label.setFixedHeight(1000)

        # Create a widget to hold the label
        scroll_content_widget = QWidget()
        scroll_content_layout = QVBoxLayout(scroll_content_widget)
        scroll_content_layout.addWidget(self.label)

        # Set the widget as the content for the scroll area
        self.scroll_area.setWidget(scroll_content_widget)
        self.scroll_area.setWidgetResizable(True)  # Allow the widget to resize

        self.url = "http://optimus17410.pythonanywhere.com/upload"  # Replace with your PythonAnywhere URL
        self.text_updater = TextUpdater(self.url)
        self.text_updater.text_updated.connect(self.update_label_text)
        self.text_updater.start_updating()
        self.showMaximized()

    def update_label_text(self, text):
        current_text = self.label.text()
        updated_text = current_text + text + "\n"
        self.label.setText(updated_text)

    def closeEvent(self, event):
        self.text_updater.stop_updating()
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = PythonWindow()
    window.show()
    sys.exit(app.exec_())
